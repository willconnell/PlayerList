{"ast":null,"code":"var _jsxFileName = \"/Users/williamconnell/Desktop/Projects/playerlist/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar.js\";\nimport Cards from \"./components/Cards.js\";\nimport Heading from \"./components/Heading.js\";\nimport AddModal from \"./components/AddModal.js\";\nimport ViewCard from \"./components/ViewCard.js\";\nimport EditModal from \"./components/EditModal.js\";\nimport MobileSidebar from \"./components/MobileSidebar.js\";\nimport Transition from \"react-transition-group/Transition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [addShowing, setAddShowing] = useState(false);\n  const [viewCardShowing, setViewCardShowing] = useState(false);\n  const [viewableSong, setViewableSong] = useState(\"\");\n  const [editShowing, setEditShowing] = useState(false);\n  const [mobileSidebarShowing, setMobileSidebarShowing] = useState(false);\n  const [count, setCount] = useState({\n    learned: 0,\n    tolearn: 0,\n    learning: 0\n  });\n  const [songs, setSongs] = useState([]); // fetch songs from backend when app is initially rendered\n\n  useEffect(() => {\n    fetch(\"/api/songs\").then(response => {\n      return response.json();\n    }).then(data => {\n      setSongs(data);\n    });\n  }, []); // run code first time the App is rendered, and everytime song state changes\n\n  useEffect(() => {\n    let tolearn = 0;\n    let learning = 0;\n    let learned = 0;\n    songs.map(song => {\n      if (song.status === \"To Learn\") {\n        tolearn += 1;\n      } else if (song.status === \"In Progress\") {\n        learning += 1;\n      } else if (song.status === \"Learned\") {\n        learned += 1;\n      }\n    });\n    setCount({\n      learned: learned,\n      tolearn: tolearn,\n      learning: learning\n    });\n  }, [songs]);\n  useEffect(() => {\n    fetch(\"/api\").then(res => res.json()).then(data => {\n      setData(data.message);\n    });\n  }, []);\n\n  const toggleAddShowing = () => {\n    setAddShowing(!addShowing);\n  };\n\n  const toggleEditShowing = () => {\n    setEditShowing(!editShowing);\n  };\n\n  const toggleViewCard = id => {\n    setViewCardShowing(!viewCardShowing); // fetch song data by id and store in viewableSong\n\n    songs.map(song => {\n      if (song.id === id) {\n        setViewableSong(song);\n      }\n    });\n  };\n\n  const exitViewCard = () => {\n    setViewCardShowing(false);\n  };\n\n  const addSong = async song => {\n    setAddShowing(false);\n    console.log(\"new song added\");\n    setSongs([...songs, {\n      id: song.id,\n      name: song.name,\n      artist: song.artist,\n      chords: song.chords,\n      youtube: song.youtube,\n      status: song.status,\n      notes: song.notes,\n      lyrics: song.lyrics,\n      visible: true\n    }]); // close mobile sidebar if it's open\n\n    setMobileSidebarShowing(false); // send song data to backend server\n\n    const response = await fetch(\"/api/songs\", {\n      method: \"POST\",\n      body: JSON.stringify(song),\n      // FIXME: headers line might not be technically required\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n\n  const saveEditedSong = newSong => {\n    songs.map(song => {\n      if (song.id === newSong.id) {\n        song.name = newSong.name;\n        song.artist = newSong.artist;\n        song.chords = newSong.chords;\n        song.youtube = newSong.youtube;\n        song.status = newSong.status;\n        song.notes = newSong.notes;\n        song.lyrics = newSong.lyrics;\n      }\n    });\n  };\n\n  const filterSongs = status => {\n    songs.map(song => {\n      console.log(song.status);\n\n      if (status === \"All\") {\n        song.visible = true;\n      } else if (song.status === status) {\n        song.visible = true;\n      } else {\n        song.visible = false;\n      }\n    });\n    setSongs([...songs]); // close mobile sidebar if it's open\n\n    setMobileSidebarShowing(false);\n  };\n\n  const deleteSong = songID => {\n    setSongs(songs.filter(song => song.id !== songID));\n    setEditShowing(false);\n  };\n\n  const markCompleted = songID => {\n    console.log(\"mark completed\");\n    console.log(songID);\n    songs.map(song => {\n      if (song.id === songID) {\n        song.status = \"Learned\";\n      }\n    });\n    setSongs([...songs]);\n    setViewCardShowing(false); // include animation with the mark as completed button if possible; (to show user that it worked)\n  };\n\n  const toggleMobileSidebar = boolean => {\n    setMobileSidebarShowing(boolean);\n    console.log(\"toggle mobile sidebar clicked\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: !data ? \"Loading...\" : data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      toggle: toggleAddShowing,\n      allLen: songs.length,\n      count: count,\n      filter: filterSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: mobileSidebarShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(MobileSidebar, {\n        state: state,\n        toggle: toggleAddShowing,\n        allLen: songs.length,\n        count: count,\n        filter: filterSongs,\n        toggleSidebar: toggleMobileSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: viewCardShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(ViewCard, {\n        state: state,\n        toggle: toggleViewCard,\n        toggleEdit: toggleEditShowing,\n        song: viewableSong,\n        exit: exitViewCard,\n        markCompleted: markCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), addShowing && /*#__PURE__*/_jsxDEV(AddModal, {\n      toggle: toggleAddShowing,\n      onAddSong: addSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: editShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(EditModal, {\n        state: state,\n        toggle: toggleEditShowing // probably will need to edit this so it doesn't create an entire new song\n        ,\n        onAddSong: addSong,\n        song: viewableSong,\n        saveChanges: saveEditedSong,\n        deleteSong: deleteSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      toggleSidebar: toggleMobileSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row cards-container offset-md-3 d-flex\",\n        children: songs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Songs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Cards, {\n          songs: songs,\n          toggle: toggleViewCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vU+LN7G7HdqSLWg+KmhHi5Yb2LI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/williamconnell/Desktop/Projects/playerlist/client/src/App.js"],"names":["useState","useEffect","Sidebar","Cards","Heading","AddModal","ViewCard","EditModal","MobileSidebar","Transition","App","data","setData","addShowing","setAddShowing","viewCardShowing","setViewCardShowing","viewableSong","setViewableSong","editShowing","setEditShowing","mobileSidebarShowing","setMobileSidebarShowing","count","setCount","learned","tolearn","learning","songs","setSongs","fetch","then","response","json","map","song","status","res","message","toggleAddShowing","toggleEditShowing","toggleViewCard","id","exitViewCard","addSong","console","log","name","artist","chords","youtube","notes","lyrics","visible","method","body","JSON","stringify","headers","saveEditedSong","newSong","filterSongs","deleteSong","songID","filter","markCompleted","toggleMobileSidebar","boolean","length","state"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,UAAP,MAAuB,mCAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACqB,oBAAD,EAAuBC,uBAAvB,IAAkDtB,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoBxB,QAAQ,CAAC;AACjCyB,IAAAA,OAAO,EAAE,CADwB;AAEjCC,IAAAA,OAAO,EAAE,CAFwB;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CAAlC;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB7B,QAAQ,CAAC,EAAD,CAAlC,CAZa,CAcb;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,KAAK,CAAC,YAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISpB,IAAD,IAAU;AACdkB,MAAAA,QAAQ,CAAClB,IAAD,CAAR;AACD,KANH;AAOD,GARQ,EAQN,EARM,CAAT,CAfa,CAyBb;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyB,OAAO,GAAG,CAAd;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIF,OAAO,GAAG,CAAd;AAEAG,IAAAA,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACC,MAAL,KAAgB,UAApB,EAAgC;AAC9BV,QAAAA,OAAO,IAAI,CAAX;AACD,OAFD,MAEO,IAAIS,IAAI,CAACC,MAAL,KAAgB,aAApB,EAAmC;AACxCT,QAAAA,QAAQ,IAAI,CAAZ;AACD,OAFM,MAEA,IAAIQ,IAAI,CAACC,MAAL,KAAgB,SAApB,EAA+B;AACpCX,QAAAA,OAAO,IAAI,CAAX;AACD;AACF,KARD;AAUAD,IAAAA,QAAQ,CAAC;AACPC,MAAAA,OAAO,EAAEA,OADF;AAEPC,MAAAA,OAAO,EAAEA,OAFF;AAGPC,MAAAA,QAAQ,EAAEA;AAHH,KAAD,CAAR;AAKD,GApBQ,EAoBN,CAACC,KAAD,CApBM,CAAT;AAsBA3B,EAAAA,SAAS,CAAC,MAAM;AACd6B,IAAAA,KAAK,CAAC,MAAD,CAAL,CACGC,IADH,CACSM,GAAD,IAASA,GAAG,CAACJ,IAAJ,EADjB,EAEGF,IAFH,CAESpB,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACD,IAAI,CAAC2B,OAAN,CAAP;AACD,KAJH;AAKD,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMC,gBAAgB,GAAG,MAAM;AAC7BzB,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,GAFD;;AAIA,QAAM2B,iBAAiB,GAAG,MAAM;AAC9BpB,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAIA,QAAMsB,cAAc,GAAIC,EAAD,IAAQ;AAC7B1B,IAAAA,kBAAkB,CAAC,CAACD,eAAF,CAAlB,CAD6B,CAE7B;;AACAa,IAAAA,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACO,EAAL,KAAYA,EAAhB,EAAoB;AAClBxB,QAAAA,eAAe,CAACiB,IAAD,CAAf;AACD;AACF,KAJD;AAKD,GARD;;AAUA,QAAMQ,YAAY,GAAG,MAAM;AACzB3B,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAM4B,OAAO,GAAG,MAAOT,IAAP,IAAgB;AAC9BrB,IAAAA,aAAa,CAAC,KAAD,CAAb;AACA+B,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAjB,IAAAA,QAAQ,CAAC,CACP,GAAGD,KADI,EAEP;AACEc,MAAAA,EAAE,EAAEP,IAAI,CAACO,EADX;AAEEK,MAAAA,IAAI,EAAEZ,IAAI,CAACY,IAFb;AAGEC,MAAAA,MAAM,EAAEb,IAAI,CAACa,MAHf;AAIEC,MAAAA,MAAM,EAAEd,IAAI,CAACc,MAJf;AAKEC,MAAAA,OAAO,EAAEf,IAAI,CAACe,OALhB;AAMEd,MAAAA,MAAM,EAAED,IAAI,CAACC,MANf;AAOEe,MAAAA,KAAK,EAAEhB,IAAI,CAACgB,KAPd;AAQEC,MAAAA,MAAM,EAAEjB,IAAI,CAACiB,MARf;AASEC,MAAAA,OAAO,EAAE;AATX,KAFO,CAAD,CAAR,CAH8B,CAiB9B;;AACA/B,IAAAA,uBAAuB,CAAC,KAAD,CAAvB,CAlB8B,CAoB9B;;AACA,UAAMU,QAAQ,GAAG,MAAMF,KAAK,CAAC,YAAD,EAAe;AACzCwB,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAetB,IAAf,CAFmC;AAGzC;AACAuB,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJgC,KAAf,CAA5B;AAQA,UAAM/C,IAAI,GAAG,MAAMqB,QAAQ,CAACC,IAAT,EAAnB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYnC,IAAZ;AACD,GA/BD;;AAiCA,QAAMgD,cAAc,GAAIC,OAAD,IAAa;AAClChC,IAAAA,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACO,EAAL,KAAYkB,OAAO,CAAClB,EAAxB,EAA4B;AAC1BP,QAAAA,IAAI,CAACY,IAAL,GAAYa,OAAO,CAACb,IAApB;AACAZ,QAAAA,IAAI,CAACa,MAAL,GAAcY,OAAO,CAACZ,MAAtB;AACAb,QAAAA,IAAI,CAACc,MAAL,GAAcW,OAAO,CAACX,MAAtB;AACAd,QAAAA,IAAI,CAACe,OAAL,GAAeU,OAAO,CAACV,OAAvB;AACAf,QAAAA,IAAI,CAACC,MAAL,GAAcwB,OAAO,CAACxB,MAAtB;AACAD,QAAAA,IAAI,CAACgB,KAAL,GAAaS,OAAO,CAACT,KAArB;AACAhB,QAAAA,IAAI,CAACiB,MAAL,GAAcQ,OAAO,CAACR,MAAtB;AACD;AACF,KAVD;AAWD,GAZD;;AAcA,QAAMS,WAAW,GAAIzB,MAAD,IAAY;AAC9BR,IAAAA,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAClBU,MAAAA,OAAO,CAACC,GAAR,CAAYX,IAAI,CAACC,MAAjB;;AACA,UAAIA,MAAM,KAAK,KAAf,EAAsB;AACpBD,QAAAA,IAAI,CAACkB,OAAL,GAAe,IAAf;AACD,OAFD,MAEO,IAAIlB,IAAI,CAACC,MAAL,KAAgBA,MAApB,EAA4B;AACjCD,QAAAA,IAAI,CAACkB,OAAL,GAAe,IAAf;AACD,OAFM,MAEA;AACLlB,QAAAA,IAAI,CAACkB,OAAL,GAAe,KAAf;AACD;AACF,KATD;AAUAxB,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR,CAX8B,CAY9B;;AACAN,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD,GAdD;;AAgBA,QAAMwC,UAAU,GAAIC,MAAD,IAAY;AAC7BlC,IAAAA,QAAQ,CAACD,KAAK,CAACoC,MAAN,CAAc7B,IAAD,IAAUA,IAAI,CAACO,EAAL,KAAYqB,MAAnC,CAAD,CAAR;AACA3C,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAHD;;AAKA,QAAM6C,aAAa,GAAIF,MAAD,IAAY;AAChClB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYiB,MAAZ;AAEAnC,IAAAA,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACO,EAAL,KAAYqB,MAAhB,EAAwB;AACtB5B,QAAAA,IAAI,CAACC,MAAL,GAAc,SAAd;AACD;AACF,KAJD;AAMAP,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACAZ,IAAAA,kBAAkB,CAAC,KAAD,CAAlB,CAXgC,CAYhC;AACD,GAbD;;AAeA,QAAMkD,mBAAmB,GAAIC,OAAD,IAAa;AACvC7C,IAAAA,uBAAuB,CAAC6C,OAAD,CAAvB;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAK,CAACnC,IAAD,GAAQ,YAAR,GAAuBA;AAA5B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,OAAD;AACE,MAAA,MAAM,EAAE4B,gBADV;AAEE,MAAA,MAAM,EAAEX,KAAK,CAACwC,MAFhB;AAGE,MAAA,KAAK,EAAE7C,KAHT;AAIE,MAAA,MAAM,EAAEsC;AAJV;AAAA;AAAA;AAAA;AAAA,YAFF,eASE,QAAC,UAAD;AACE,MAAA,EAAE,EAAExC,oBADN;AAEE,MAAA,OAAO,EAAE,GAFX;AAGE,MAAA,YAAY,MAHd;AAIE,MAAA,aAAa,MAJf;AAAA,gBAMIgD,KAAD,iBACC,QAAC,aAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAE9B,gBAFV;AAGE,QAAA,MAAM,EAAEX,KAAK,CAACwC,MAHhB;AAIE,QAAA,KAAK,EAAE7C,KAJT;AAKE,QAAA,MAAM,EAAEsC,WALV;AAME,QAAA,aAAa,EAAEK;AANjB;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YATF,eAqCE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAEnD,eAAhB;AAAiC,MAAA,OAAO,EAAE,GAA1C;AAA+C,MAAA,YAAY,MAA3D;AAA4D,MAAA,aAAa,MAAzE;AAAA,gBACIsD,KAAD,iBACC,QAAC,QAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAE5B,cAFV;AAGE,QAAA,UAAU,EAAED,iBAHd;AAIE,QAAA,IAAI,EAAEvB,YAJR;AAKE,QAAA,IAAI,EAAE0B,YALR;AAME,QAAA,aAAa,EAAEsB;AANjB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YArCF,EA6DGpD,UAAU,iBAAI,QAAC,QAAD;AAAU,MAAA,MAAM,EAAE0B,gBAAlB;AAAoC,MAAA,SAAS,EAAEK;AAA/C;AAAA;AAAA;AAAA;AAAA,YA7DjB,eA+DE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAEzB,WAAhB;AAA6B,MAAA,OAAO,EAAE,GAAtC;AAA2C,MAAA,YAAY,MAAvD;AAAwD,MAAA,aAAa,MAArE;AAAA,gBACIkD,KAAD,iBACC,QAAC,SAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAE7B,iBAFV,CAGE;AAHF;AAIE,QAAA,SAAS,EAAEI,OAJb;AAKE,QAAA,IAAI,EAAE3B,YALR;AAME,QAAA,WAAW,EAAE0C,cANf;AAOE,QAAA,UAAU,EAAEG;AAPd;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YA/DF,eA6EE,QAAC,OAAD;AAAS,MAAA,aAAa,EAAEI;AAAxB;AAAA;AAAA;AAAA;AAAA,YA7EF,eA8EE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,wCAAf;AAAA,kBAEGtC,KAAK,CAACwC,MAAN,KAAiB,CAAjB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,gBAGC,QAAC,KAAD;AAAO,UAAA,KAAK,EAAExC,KAAd;AAAqB,UAAA,MAAM,EAAEa;AAA7B;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA9EF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2FD;;GAjQQ/B,G;;KAAAA,G;AAmQT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar.js\";\nimport Cards from \"./components/Cards.js\";\nimport Heading from \"./components/Heading.js\";\nimport AddModal from \"./components/AddModal.js\";\nimport ViewCard from \"./components/ViewCard.js\";\nimport EditModal from \"./components/EditModal.js\";\nimport MobileSidebar from \"./components/MobileSidebar.js\";\nimport Transition from \"react-transition-group/Transition\";\n\nfunction App() {\n  const [data, setData] = useState(null);\n  const [addShowing, setAddShowing] = useState(false);\n  const [viewCardShowing, setViewCardShowing] = useState(false);\n  const [viewableSong, setViewableSong] = useState(\"\");\n  const [editShowing, setEditShowing] = useState(false);\n  const [mobileSidebarShowing, setMobileSidebarShowing] = useState(false);\n  const [count, setCount] = useState({\n    learned: 0,\n    tolearn: 0,\n    learning: 0,\n  });\n  const [songs, setSongs] = useState([]);\n\n  // fetch songs from backend when app is initially rendered\n  useEffect(() => {\n    fetch(\"/api/songs\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        setSongs(data);\n      });\n  }, []);\n\n  // run code first time the App is rendered, and everytime song state changes\n  useEffect(() => {\n    let tolearn = 0;\n    let learning = 0;\n    let learned = 0;\n\n    songs.map((song) => {\n      if (song.status === \"To Learn\") {\n        tolearn += 1;\n      } else if (song.status === \"In Progress\") {\n        learning += 1;\n      } else if (song.status === \"Learned\") {\n        learned += 1;\n      }\n    });\n\n    setCount({\n      learned: learned,\n      tolearn: tolearn,\n      learning: learning,\n    });\n  }, [songs]);\n\n  useEffect(() => {\n    fetch(\"/api\")\n      .then((res) => res.json())\n      .then((data) => {\n        setData(data.message);\n      });\n  }, []);\n\n  const toggleAddShowing = () => {\n    setAddShowing(!addShowing);\n  };\n\n  const toggleEditShowing = () => {\n    setEditShowing(!editShowing);\n  };\n\n  const toggleViewCard = (id) => {\n    setViewCardShowing(!viewCardShowing);\n    // fetch song data by id and store in viewableSong\n    songs.map((song) => {\n      if (song.id === id) {\n        setViewableSong(song);\n      }\n    });\n  };\n\n  const exitViewCard = () => {\n    setViewCardShowing(false);\n  };\n\n  const addSong = async (song) => {\n    setAddShowing(false);\n    console.log(\"new song added\");\n    setSongs([\n      ...songs,\n      {\n        id: song.id,\n        name: song.name,\n        artist: song.artist,\n        chords: song.chords,\n        youtube: song.youtube,\n        status: song.status,\n        notes: song.notes,\n        lyrics: song.lyrics,\n        visible: true,\n      },\n    ]);\n    // close mobile sidebar if it's open\n    setMobileSidebarShowing(false);\n\n    // send song data to backend server\n    const response = await fetch(\"/api/songs\", {\n      method: \"POST\",\n      body: JSON.stringify(song),\n      // FIXME: headers line might not be technically required\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n\n  const saveEditedSong = (newSong) => {\n    songs.map((song) => {\n      if (song.id === newSong.id) {\n        song.name = newSong.name;\n        song.artist = newSong.artist;\n        song.chords = newSong.chords;\n        song.youtube = newSong.youtube;\n        song.status = newSong.status;\n        song.notes = newSong.notes;\n        song.lyrics = newSong.lyrics;\n      }\n    });\n  };\n\n  const filterSongs = (status) => {\n    songs.map((song) => {\n      console.log(song.status);\n      if (status === \"All\") {\n        song.visible = true;\n      } else if (song.status === status) {\n        song.visible = true;\n      } else {\n        song.visible = false;\n      }\n    });\n    setSongs([...songs]);\n    // close mobile sidebar if it's open\n    setMobileSidebarShowing(false);\n  };\n\n  const deleteSong = (songID) => {\n    setSongs(songs.filter((song) => song.id !== songID));\n    setEditShowing(false);\n  };\n\n  const markCompleted = (songID) => {\n    console.log(\"mark completed\");\n    console.log(songID);\n\n    songs.map((song) => {\n      if (song.id === songID) {\n        song.status = \"Learned\";\n      }\n    });\n\n    setSongs([...songs]);\n    setViewCardShowing(false);\n    // include animation with the mark as completed button if possible; (to show user that it worked)\n  };\n\n  const toggleMobileSidebar = (boolean) => {\n    setMobileSidebarShowing(boolean);\n    console.log(\"toggle mobile sidebar clicked\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{!data ? \"Loading...\" : data}</h1>\n      <Sidebar\n        toggle={toggleAddShowing}\n        allLen={songs.length}\n        count={count}\n        filter={filterSongs}\n      />\n\n      <Transition\n        in={mobileSidebarShowing}\n        timeout={400}\n        mountOnEnter\n        unmountOnExit\n      >\n        {(state) => (\n          <MobileSidebar\n            state={state}\n            toggle={toggleAddShowing}\n            allLen={songs.length}\n            count={count}\n            filter={filterSongs}\n            toggleSidebar={toggleMobileSidebar}\n          />\n        )}\n      </Transition>\n\n      {/* {mobileSidebarShowing && (\n        <MobileSidebar\n          toggle={toggleAddShowing}\n          allLen={songs.length}\n          count={count}\n          filter={filterSongs}\n          toggleSidebar={toggleMobileSidebar}\n        />\n      )} */}\n\n      <Transition in={viewCardShowing} timeout={400} mountOnEnter unmountOnExit>\n        {(state) => (\n          <ViewCard\n            state={state}\n            toggle={toggleViewCard}\n            toggleEdit={toggleEditShowing}\n            song={viewableSong}\n            exit={exitViewCard}\n            markCompleted={markCompleted}\n          />\n        )}\n      </Transition>\n\n      {/* <Transition in={addShowing} timeout={400} mountOnEnter unmountOnExit>\n        {(state) => (\n          <AddModal\n            state={state}\n            toggle={toggleAddShowing}\n            onAddSong={addSong}\n          />\n        )}\n      </Transition> */}\n\n      {/* FIXME: including below line until I can fix bug with the above transition */}\n      {addShowing && <AddModal toggle={toggleAddShowing} onAddSong={addSong} />}\n\n      <Transition in={editShowing} timeout={400} mountOnEnter unmountOnExit>\n        {(state) => (\n          <EditModal\n            state={state}\n            toggle={toggleEditShowing}\n            // probably will need to edit this so it doesn't create an entire new song\n            onAddSong={addSong}\n            song={viewableSong}\n            saveChanges={saveEditedSong}\n            deleteSong={deleteSong}\n          />\n        )}\n      </Transition>\n\n      <Heading toggleSidebar={toggleMobileSidebar} />\n      <div className=\"container\">\n        <div className=\"row cards-container offset-md-3 d-flex\">\n          {/* <Cards songs={songs} toggle={toggleViewCard} /> */}\n          {songs.length === 0 ? (\n            <p>No Songs</p>\n          ) : (\n            <Cards songs={songs} toggle={toggleViewCard} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}