{"ast":null,"code":"var _jsxFileName = \"/Users/williamconnell/Desktop/Projects/playerList/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar.js\";\nimport Cards from \"./components/Cards.js\";\nimport Heading from \"./components/Heading.js\";\nimport AddModal from \"./components/AddModal.js\";\nimport ViewCard from \"./components/ViewCard.js\";\nimport EditModal from \"./components/EditModal.js\";\nimport MobileSidebar from \"./components/MobileSidebar.js\";\nimport Transition from \"react-transition-group/Transition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [addShowing, setAddShowing] = useState(false);\n  const [viewCardShowing, setViewCardShowing] = useState(false);\n  const [viewableSong, setViewableSong] = useState(\"\");\n  const [editShowing, setEditShowing] = useState(false);\n  const [mobileSidebarShowing, setMobileSidebarShowing] = useState(false);\n  const [count, setCount] = useState({\n    learned: 0,\n    tolearn: 0,\n    learning: 0\n  });\n  const [songs, setSongs] = useState([]); // practice call to the genius API\n\n  useEffect(async () => {\n    fetchGeniusData('pride and joy', 'stevie ray vaughan');\n  }, []); // fetch songs from backend when app is initially rendered\n\n  useEffect(() => {\n    fetch(\"/api/songs\").then(response => {\n      return response.json();\n    }).then(data => {\n      setSongs(data);\n    }); // console.log(\"songs retrieved from backend\");\n  }, []); // count songs for sidebar numbers\n\n  useEffect(() => {\n    let tolearn = 0;\n    let learning = 0;\n    let learned = 0;\n    songs.map(song => {\n      if (song.status === \"To Learn\") {\n        tolearn += 1;\n      } else if (song.status === \"In Progress\") {\n        learning += 1;\n      } else if (song.status === \"Learned\") {\n        learned += 1;\n      }\n    });\n    setCount({\n      learned: learned,\n      tolearn: tolearn,\n      learning: learning\n    });\n  }, [songs]);\n\n  const toggleAddShowing = () => {\n    setAddShowing(!addShowing); // close mobile sidebar if it's opened\n\n    setMobileSidebarShowing(false);\n  };\n\n  const toggleEditShowing = () => {\n    setEditShowing(!editShowing);\n  };\n\n  const toggleViewCard = id => {\n    setViewCardShowing(!viewCardShowing); // fetch song data by id and store in viewableSong\n\n    songs.map(song => {\n      if (song.id === id) {\n        setViewableSong(song);\n      }\n    });\n  };\n\n  const exitViewCard = () => {\n    setViewCardShowing(false);\n  };\n\n  const addSong = async song => {\n    // design: if user inputs youtube link, that link takes priority over \n    // the fetched YT link from the genius API\n    setAddShowing(false); // console.log(\"new song added\");\n    // fetch data from genius api where none is provided\n    // FIXME: dummy song and artist name here rn\n\n    const songMedia = fetchGeniusData(song.name, song.artist);\n    songMedia.forEach(media_source => {\n      console.log(media_source.provider, \"LINK IS\", media_source.url);\n    });\n    setSongs([...songs, {\n      id: songs.length + 1,\n      name: song.name,\n      artist: song.artist,\n      chords: song.chords,\n      youtube: song.youtube,\n      status: song.status,\n      notes: song.notes,\n      lyrics: song.lyrics,\n      visible: true\n    }]); // send song data to backend server\n\n    const response = await fetch(\"/api/songs\", {\n      method: \"POST\",\n      body: JSON.stringify(song),\n      // FIXME: headers line might not be technically required\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json(); // console.log(data);\n    // console.log(\"song sent to server\");\n  };\n\n  const saveEditedSong = async newSong => {\n    songs.map(async song => {\n      if (song.id === newSong.id) {\n        song.name = newSong.name;\n        song.artist = newSong.artist;\n        song.chords = newSong.chords;\n        song.youtube = newSong.youtube;\n        song.status = newSong.status;\n        song.notes = newSong.notes;\n        song.lyrics = newSong.lyrics;\n      }\n    }); // console.log(newSong);\n\n    const response = await fetch(`/api/songs/${newSong.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(newSong),\n      // FIXME: headers line might not be technically required\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json(); // console.log(\"updated song sent to server\");\n  };\n\n  const filterSongs = status => {\n    songs.map(song => {\n      // console.log(song.status);\n      if (status === \"All\") {\n        song.visible = true;\n      } else if (song.status === status) {\n        song.visible = true;\n      } else {\n        song.visible = false;\n      }\n    });\n    setSongs([...songs]); // close mobile sidebar if it's open\n\n    setMobileSidebarShowing(false);\n  };\n\n  const deleteSong = async songID => {\n    // delete song from UI\n    setSongs(songs.filter(song => song.id !== songID));\n    setEditShowing(false); // delete from backend with API call\n\n    fetch(`/api/songs/${songID}`, {\n      method: \"DELETE\"\n    }); // console.log(\"songID\", songID);\n  };\n\n  const markCompleted = async songID => {\n    // console.log(\"mark completed\");\n    // console.log(songID);\n    songs.map(async song => {\n      if (song.id === songID) {\n        song.status = \"Learned\"; // send PUT request to the server\n\n        const response = await fetch(`/api/songs/${song.id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(song),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      }\n    });\n    setSongs([...songs]);\n    setViewCardShowing(false);\n  };\n\n  const toggleMobileSidebar = boolean => {\n    setMobileSidebarShowing(boolean); // console.log(\"toggle mobile sidebar clicked\");\n  };\n\n  const fetchGeniusData = async (song_name, artist_name) => {\n    // ACCESS TOKEN ---------------------------------------------------------------------\n    const accessToken = \"qsdfz6yd1U341DT9dPiANrAN67MdHenvI_D8s9g-QnNdmie17u97MhuDrHBr4Upj\"; // query Genius API and return the first hit's song data\n\n    const query = `${song_name.replaceAll(\" \", \"%20\")}%20${artist_name.replaceAll(\" \", \"%20\")}`;\n    const uri = `https://api.genius.com/search?access_token=${accessToken}&q=${query}`;\n    const search_response = await fetch(uri);\n    const data = await search_response.json();\n    console.log(data); // first result of search; currently no checking in place yet\n    // If title of first result matches, then show the result\n\n    if (data.response.hits[0].result.title.toUpperCase().trim() === song_name.toUpperCase().trim()) {\n      console.log('MATCH FOUND');\n    } else {\n      console.log('No match found in the Genius Database. Double check spelling of song name and artist name.');\n    }\n\n    console.log(data.response.hits[0].result.full_title);\n    const api_path = data.response.hits[0].result.api_path;\n    const song_uri = `https://api.genius.com${api_path}?access_token=${accessToken}`;\n    const song_response = await fetch(song_uri);\n    const song_data = await song_response.json();\n    console.log(\"song data:\", song_data); // song_data.response.song.media.forEach((media_source) => {\n    //   console.log(media_source.provider, \"link is\", media_source.url);\n    // });\n\n    console.log(\"genius link is \", song_data.response.song.url);\n    return song_data.response.song.media;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      toggle: toggleAddShowing,\n      allLen: songs.length,\n      count: count,\n      filter: filterSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: mobileSidebarShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(MobileSidebar, {\n        state: state,\n        toggle: toggleAddShowing,\n        allLen: songs.length,\n        count: count,\n        filter: filterSongs,\n        toggleSidebar: toggleMobileSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: viewCardShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(ViewCard, {\n        state: state,\n        toggle: toggleViewCard,\n        toggleEdit: toggleEditShowing,\n        song: viewableSong,\n        exit: exitViewCard,\n        markCompleted: markCompleted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: addShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(AddModal, {\n        state: state,\n        toggle: toggleAddShowing,\n        onAddSong: addSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Transition, {\n      in: editShowing,\n      timeout: 400,\n      mountOnEnter: true,\n      unmountOnExit: true,\n      children: state => /*#__PURE__*/_jsxDEV(EditModal, {\n        state: state,\n        toggle: toggleEditShowing // probably will need to edit this so it doesn't create an entire new song\n        ,\n        onAddSong: addSong,\n        song: viewableSong,\n        saveChanges: saveEditedSong,\n        deleteSong: deleteSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      toggleSidebar: toggleMobileSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row cards-container offset-md-3 d-flex\",\n        children: songs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Songs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Cards, {\n          songs: songs,\n          toggle: toggleViewCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GYHT99SbOGIXu9cz7/lh7c25nhY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/williamconnell/Desktop/Projects/playerList/client/src/App.js"],"names":["useState","useEffect","Sidebar","Cards","Heading","AddModal","ViewCard","EditModal","MobileSidebar","Transition","App","addShowing","setAddShowing","viewCardShowing","setViewCardShowing","viewableSong","setViewableSong","editShowing","setEditShowing","mobileSidebarShowing","setMobileSidebarShowing","count","setCount","learned","tolearn","learning","songs","setSongs","fetchGeniusData","fetch","then","response","json","data","map","song","status","toggleAddShowing","toggleEditShowing","toggleViewCard","id","exitViewCard","addSong","songMedia","name","artist","forEach","media_source","console","log","provider","url","length","chords","youtube","notes","lyrics","visible","method","body","JSON","stringify","headers","saveEditedSong","newSong","filterSongs","deleteSong","songID","filter","markCompleted","toggleMobileSidebar","boolean","song_name","artist_name","accessToken","query","replaceAll","uri","search_response","hits","result","title","toUpperCase","trim","full_title","api_path","song_uri","song_response","song_data","media","state"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,UAAP,MAAuB,mCAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACmB,oBAAD,EAAuBC,uBAAvB,IAAkDpB,QAAQ,CAAC,KAAD,CAAhE;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC;AACjCuB,IAAAA,OAAO,EAAE,CADwB;AAEjCC,IAAAA,OAAO,EAAE,CAFwB;AAGjCC,IAAAA,QAAQ,EAAE;AAHuB,GAAD,CAAlC;AAKA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,EAAD,CAAlC,CAXa,CAab;;AACAC,EAAAA,SAAS,CAAC,YAAY;AACpB2B,IAAAA,eAAe,CAAC,eAAD,EAAkB,oBAAlB,CAAf;AACD,GAFQ,EAEN,EAFM,CAAT,CAda,CAkBb;;AACA3B,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,KAAK,CAAC,YAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAU;AACdN,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACD,KANH,EADc,CAQd;AACD,GATQ,EASN,EATM,CAAT,CAnBa,CA8Bb;;AACAhC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,OAAO,GAAG,CAAd;AACA,QAAIC,QAAQ,GAAG,CAAf;AACA,QAAIF,OAAO,GAAG,CAAd;AAEAG,IAAAA,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACC,MAAL,KAAgB,UAApB,EAAgC;AAC9BZ,QAAAA,OAAO,IAAI,CAAX;AACD,OAFD,MAEO,IAAIW,IAAI,CAACC,MAAL,KAAgB,aAApB,EAAmC;AACxCX,QAAAA,QAAQ,IAAI,CAAZ;AACD,OAFM,MAEA,IAAIU,IAAI,CAACC,MAAL,KAAgB,SAApB,EAA+B;AACpCb,QAAAA,OAAO,IAAI,CAAX;AACD;AACF,KARD;AAUAD,IAAAA,QAAQ,CAAC;AACPC,MAAAA,OAAO,EAAEA,OADF;AAEPC,MAAAA,OAAO,EAAEA,OAFF;AAGPC,MAAAA,QAAQ,EAAEA;AAHH,KAAD,CAAR;AAKD,GApBQ,EAoBN,CAACC,KAAD,CApBM,CAAT;;AAsBA,QAAMW,gBAAgB,GAAG,MAAM;AAC7BzB,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb,CAD6B,CAE7B;;AACAS,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD,GAJD;;AAMA,QAAMkB,iBAAiB,GAAG,MAAM;AAC9BpB,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACD,GAFD;;AAIA,QAAMsB,cAAc,GAAIC,EAAD,IAAQ;AAC7B1B,IAAAA,kBAAkB,CAAC,CAACD,eAAF,CAAlB,CAD6B,CAE7B;;AACAa,IAAAA,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACK,EAAL,KAAYA,EAAhB,EAAoB;AAClBxB,QAAAA,eAAe,CAACmB,IAAD,CAAf;AACD;AACF,KAJD;AAKD,GARD;;AAUA,QAAMM,YAAY,GAAG,MAAM;AACzB3B,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAM4B,OAAO,GAAG,MAAOP,IAAP,IAAgB;AAC9B;AACA;AAEAvB,IAAAA,aAAa,CAAC,KAAD,CAAb,CAJ8B,CAK9B;AAEA;AACA;;AACA,UAAM+B,SAAS,GAAGf,eAAe,CAACO,IAAI,CAACS,IAAN,EAAYT,IAAI,CAACU,MAAjB,CAAjC;AACAF,IAAAA,SAAS,CAACG,OAAV,CAAmBC,YAAD,IAAkB;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,QAAzB,EAAmC,SAAnC,EAA8CH,YAAY,CAACI,GAA3D;AACD,KAFD;AAIAxB,IAAAA,QAAQ,CAAC,CACP,GAAGD,KADI,EAEP;AACEc,MAAAA,EAAE,EAAEd,KAAK,CAAC0B,MAAN,GAAe,CADrB;AAEER,MAAAA,IAAI,EAAET,IAAI,CAACS,IAFb;AAGEC,MAAAA,MAAM,EAAEV,IAAI,CAACU,MAHf;AAIEQ,MAAAA,MAAM,EAAElB,IAAI,CAACkB,MAJf;AAKEC,MAAAA,OAAO,EAAEnB,IAAI,CAACmB,OALhB;AAMElB,MAAAA,MAAM,EAAED,IAAI,CAACC,MANf;AAOEmB,MAAAA,KAAK,EAAEpB,IAAI,CAACoB,KAPd;AAQEC,MAAAA,MAAM,EAAErB,IAAI,CAACqB,MARf;AASEC,MAAAA,OAAO,EAAE;AATX,KAFO,CAAD,CAAR,CAd8B,CA6B9B;;AACA,UAAM1B,QAAQ,GAAG,MAAMF,KAAK,CAAC,YAAD,EAAe;AACzC6B,MAAAA,MAAM,EAAE,MADiC;AAEzCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe1B,IAAf,CAFmC;AAGzC;AACA2B,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJgC,KAAf,CAA5B;AAQA,UAAM7B,IAAI,GAAG,MAAMF,QAAQ,CAACC,IAAT,EAAnB,CAtC8B,CAuC9B;AACA;AACD,GAzCD;;AA2CA,QAAM+B,cAAc,GAAG,MAAOC,OAAP,IAAmB;AACxCtC,IAAAA,KAAK,CAACQ,GAAN,CAAU,MAAOC,IAAP,IAAgB;AACxB,UAAIA,IAAI,CAACK,EAAL,KAAYwB,OAAO,CAACxB,EAAxB,EAA4B;AAC1BL,QAAAA,IAAI,CAACS,IAAL,GAAYoB,OAAO,CAACpB,IAApB;AACAT,QAAAA,IAAI,CAACU,MAAL,GAAcmB,OAAO,CAACnB,MAAtB;AACAV,QAAAA,IAAI,CAACkB,MAAL,GAAcW,OAAO,CAACX,MAAtB;AACAlB,QAAAA,IAAI,CAACmB,OAAL,GAAeU,OAAO,CAACV,OAAvB;AACAnB,QAAAA,IAAI,CAACC,MAAL,GAAc4B,OAAO,CAAC5B,MAAtB;AACAD,QAAAA,IAAI,CAACoB,KAAL,GAAaS,OAAO,CAACT,KAArB;AACApB,QAAAA,IAAI,CAACqB,MAAL,GAAcQ,OAAO,CAACR,MAAtB;AACD;AACF,KAVD,EADwC,CAaxC;;AACA,UAAMzB,QAAQ,GAAG,MAAMF,KAAK,CAAE,cAAamC,OAAO,CAACxB,EAAG,EAA1B,EAA6B;AACvDkB,MAAAA,MAAM,EAAE,KAD+C;AAEvDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeG,OAAf,CAFiD;AAGvD;AACAF,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJ8C,KAA7B,CAA5B;AAQA,UAAM7B,IAAI,GAAG,MAAMF,QAAQ,CAACC,IAAT,EAAnB,CAtBwC,CAuBxC;AACD,GAxBD;;AA0BA,QAAMiC,WAAW,GAAI7B,MAAD,IAAY;AAC9BV,IAAAA,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB;AACA,UAAIC,MAAM,KAAK,KAAf,EAAsB;AACpBD,QAAAA,IAAI,CAACsB,OAAL,GAAe,IAAf;AACD,OAFD,MAEO,IAAItB,IAAI,CAACC,MAAL,KAAgBA,MAApB,EAA4B;AACjCD,QAAAA,IAAI,CAACsB,OAAL,GAAe,IAAf;AACD,OAFM,MAEA;AACLtB,QAAAA,IAAI,CAACsB,OAAL,GAAe,KAAf;AACD;AACF,KATD;AAUA9B,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR,CAX8B,CAY9B;;AACAN,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACD,GAdD;;AAgBA,QAAM8C,UAAU,GAAG,MAAOC,MAAP,IAAkB;AACnC;AACAxC,IAAAA,QAAQ,CAACD,KAAK,CAAC0C,MAAN,CAAcjC,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAY2B,MAAnC,CAAD,CAAR;AACAjD,IAAAA,cAAc,CAAC,KAAD,CAAd,CAHmC,CAKnC;;AACAW,IAAAA,KAAK,CAAE,cAAasC,MAAO,EAAtB,EAAyB;AAC5BT,MAAAA,MAAM,EAAE;AADoB,KAAzB,CAAL,CANmC,CAUnC;AACD,GAXD;;AAaA,QAAMW,aAAa,GAAG,MAAOF,MAAP,IAAkB;AACtC;AACA;AAEAzC,IAAAA,KAAK,CAACQ,GAAN,CAAU,MAAOC,IAAP,IAAgB;AACxB,UAAIA,IAAI,CAACK,EAAL,KAAY2B,MAAhB,EAAwB;AACtBhC,QAAAA,IAAI,CAACC,MAAL,GAAc,SAAd,CADsB,CAEtB;;AACA,cAAML,QAAQ,GAAG,MAAMF,KAAK,CAAE,cAAaM,IAAI,CAACK,EAAG,EAAvB,EAA0B;AACpDkB,UAAAA,MAAM,EAAE,KAD4C;AAEpDC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe1B,IAAf,CAF8C;AAGpD2B,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT;AAH2C,SAA1B,CAA5B;AAOD;AACF,KAZD;AAcAnC,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,CAAD,CAAR;AACAZ,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GApBD;;AAsBA,QAAMwD,mBAAmB,GAAIC,OAAD,IAAa;AACvCnD,IAAAA,uBAAuB,CAACmD,OAAD,CAAvB,CADuC,CAEvC;AACD,GAHD;;AAKA,QAAM3C,eAAe,GAAG,OAAO4C,SAAP,EAAkBC,WAAlB,KAAkC;AACxD;AACA,UAAMC,WAAW,GAAG,kEAApB,CAFwD,CAIxD;;AACA,UAAMC,KAAK,GAAI,GAAEH,SAAS,CAACI,UAAV,CACf,GADe,EAEf,KAFe,CAGf,MAAKH,WAAW,CAACG,UAAZ,CAAuB,GAAvB,EAA4B,KAA5B,CAAmC,EAH1C;AAIA,UAAMC,GAAG,GAAI,8CAA6CH,WAAY,MAAKC,KAAM,EAAjF;AACA,UAAMG,eAAe,GAAG,MAAMjD,KAAK,CAACgD,GAAD,CAAnC;AACA,UAAM5C,IAAI,GAAG,MAAM6C,eAAe,CAAC9C,IAAhB,EAAnB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ,EAZwD,CAaxD;AACA;;AACA,QAAIA,IAAI,CAACF,QAAL,CAAcgD,IAAd,CAAmB,CAAnB,EAAsBC,MAAtB,CAA6BC,KAA7B,CAAmCC,WAAnC,GAAiDC,IAAjD,OAA4DX,SAAS,CAACU,WAAV,GAAwBC,IAAxB,EAAhE,EAAgG;AAC9FnC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KAFD,MAEO;AACLD,MAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AACD;;AAEDD,IAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAI,CAACF,QAAL,CAAcgD,IAAd,CAAmB,CAAnB,EAAsBC,MAAtB,CAA6BI,UAAzC;AACA,UAAMC,QAAQ,GAAGpD,IAAI,CAACF,QAAL,CAAcgD,IAAd,CAAmB,CAAnB,EAAsBC,MAAtB,CAA6BK,QAA9C;AACA,UAAMC,QAAQ,GAAI,yBAAwBD,QAAS,iBAAgBX,WAAY,EAA/E;AACA,UAAMa,aAAa,GAAG,MAAM1D,KAAK,CAACyD,QAAD,CAAjC;AACA,UAAME,SAAS,GAAG,MAAMD,aAAa,CAACvD,IAAd,EAAxB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BuC,SAA1B,EA1BwD,CA4BxD;AACA;AACA;;AAEAxC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BuC,SAAS,CAACzD,QAAV,CAAmBI,IAAnB,CAAwBgB,GAAvD;AAEA,WAAOqC,SAAS,CAACzD,QAAV,CAAmBI,IAAnB,CAAwBsD,KAA/B;AACD,GAnCD;;AAqCA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,OAAD;AACE,MAAA,MAAM,EAAEpD,gBADV;AAEE,MAAA,MAAM,EAAEX,KAAK,CAAC0B,MAFhB;AAGE,MAAA,KAAK,EAAE/B,KAHT;AAIE,MAAA,MAAM,EAAE4C;AAJV;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,UAAD;AACE,MAAA,EAAE,EAAE9C,oBADN;AAEE,MAAA,OAAO,EAAE,GAFX;AAGE,MAAA,YAAY,MAHd;AAIE,MAAA,aAAa,MAJf;AAAA,gBAMIuE,KAAD,iBACC,QAAC,aAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAErD,gBAFV;AAGE,QAAA,MAAM,EAAEX,KAAK,CAAC0B,MAHhB;AAIE,QAAA,KAAK,EAAE/B,KAJT;AAKE,QAAA,MAAM,EAAE4C,WALV;AAME,QAAA,aAAa,EAAEK;AANjB;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,YARF,eAoCE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAEzD,eAAhB;AAAiC,MAAA,OAAO,EAAE,GAA1C;AAA+C,MAAA,YAAY,MAA3D;AAA4D,MAAA,aAAa,MAAzE;AAAA,gBACI6E,KAAD,iBACC,QAAC,QAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAEnD,cAFV;AAGE,QAAA,UAAU,EAAED,iBAHd;AAIE,QAAA,IAAI,EAAEvB,YAJR;AAKE,QAAA,IAAI,EAAE0B,YALR;AAME,QAAA,aAAa,EAAE4B;AANjB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YApCF,eAiDE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAE1D,UAAhB;AAA4B,MAAA,OAAO,EAAE,GAArC;AAA0C,MAAA,YAAY,MAAtD;AAAuD,MAAA,aAAa,MAApE;AAAA,gBACI+E,KAAD,iBACC,QAAC,QAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAErD,gBAFV;AAGE,QAAA,SAAS,EAAEK;AAHb;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAjDF,eA8DE,QAAC,UAAD;AAAY,MAAA,EAAE,EAAEzB,WAAhB;AAA6B,MAAA,OAAO,EAAE,GAAtC;AAA2C,MAAA,YAAY,MAAvD;AAAwD,MAAA,aAAa,MAArE;AAAA,gBACIyE,KAAD,iBACC,QAAC,SAAD;AACE,QAAA,KAAK,EAAEA,KADT;AAEE,QAAA,MAAM,EAAEpD,iBAFV,CAGE;AAHF;AAIE,QAAA,SAAS,EAAEI,OAJb;AAKE,QAAA,IAAI,EAAE3B,YALR;AAME,QAAA,WAAW,EAAEgD,cANf;AAOE,QAAA,UAAU,EAAEG;AAPd;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YA9DF,eA4EE,QAAC,OAAD;AAAS,MAAA,aAAa,EAAEI;AAAxB;AAAA;AAAA;AAAA;AAAA,YA5EF,eA6EE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,wCAAf;AAAA,kBAEG5C,KAAK,CAAC0B,MAAN,KAAiB,CAAjB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,gBAGC,QAAC,KAAD;AAAO,UAAA,KAAK,EAAE1B,KAAd;AAAqB,UAAA,MAAM,EAAEa;AAA7B;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA7EF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0FD;;GAzUQ7B,G;;KAAAA,G;AA2UT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar.js\";\nimport Cards from \"./components/Cards.js\";\nimport Heading from \"./components/Heading.js\";\nimport AddModal from \"./components/AddModal.js\";\nimport ViewCard from \"./components/ViewCard.js\";\nimport EditModal from \"./components/EditModal.js\";\nimport MobileSidebar from \"./components/MobileSidebar.js\";\nimport Transition from \"react-transition-group/Transition\";\n\nfunction App() {\n  const [addShowing, setAddShowing] = useState(false);\n  const [viewCardShowing, setViewCardShowing] = useState(false);\n  const [viewableSong, setViewableSong] = useState(\"\");\n  const [editShowing, setEditShowing] = useState(false);\n  const [mobileSidebarShowing, setMobileSidebarShowing] = useState(false);\n  const [count, setCount] = useState({\n    learned: 0,\n    tolearn: 0,\n    learning: 0,\n  });\n  const [songs, setSongs] = useState([]);\n\n  // practice call to the genius API\n  useEffect(async () => {\n    fetchGeniusData('pride and joy', 'stevie ray vaughan')\n  }, []);\n\n  // fetch songs from backend when app is initially rendered\n  useEffect(() => {\n    fetch(\"/api/songs\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        setSongs(data);\n      });\n    // console.log(\"songs retrieved from backend\");\n  }, []);\n\n  // count songs for sidebar numbers\n  useEffect(() => {\n    let tolearn = 0;\n    let learning = 0;\n    let learned = 0;\n\n    songs.map((song) => {\n      if (song.status === \"To Learn\") {\n        tolearn += 1;\n      } else if (song.status === \"In Progress\") {\n        learning += 1;\n      } else if (song.status === \"Learned\") {\n        learned += 1;\n      }\n    });\n\n    setCount({\n      learned: learned,\n      tolearn: tolearn,\n      learning: learning,\n    });\n  }, [songs]);\n\n  const toggleAddShowing = () => {\n    setAddShowing(!addShowing);\n    // close mobile sidebar if it's opened\n    setMobileSidebarShowing(false);\n  };\n\n  const toggleEditShowing = () => {\n    setEditShowing(!editShowing);\n  };\n\n  const toggleViewCard = (id) => {\n    setViewCardShowing(!viewCardShowing);\n    // fetch song data by id and store in viewableSong\n    songs.map((song) => {\n      if (song.id === id) {\n        setViewableSong(song);\n      }\n    });\n  };\n\n  const exitViewCard = () => {\n    setViewCardShowing(false);\n  };\n\n  const addSong = async (song) => {\n    // design: if user inputs youtube link, that link takes priority over \n    // the fetched YT link from the genius API\n\n    setAddShowing(false);\n    // console.log(\"new song added\");\n\n    // fetch data from genius api where none is provided\n    // FIXME: dummy song and artist name here rn\n    const songMedia = fetchGeniusData(song.name, song.artist)\n    songMedia.forEach((media_source) => {\n      console.log(media_source.provider, \"LINK IS\", media_source.url);\n    })\n\n    setSongs([\n      ...songs,\n      {\n        id: songs.length + 1,\n        name: song.name,\n        artist: song.artist,\n        chords: song.chords,\n        youtube: song.youtube,\n        status: song.status,\n        notes: song.notes,\n        lyrics: song.lyrics,\n        visible: true,\n      },\n    ]);\n\n    // send song data to backend server\n    const response = await fetch(\"/api/songs\", {\n      method: \"POST\",\n      body: JSON.stringify(song),\n      // FIXME: headers line might not be technically required\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n    // console.log(data);\n    // console.log(\"song sent to server\");\n  };\n\n  const saveEditedSong = async (newSong) => {\n    songs.map(async (song) => {\n      if (song.id === newSong.id) {\n        song.name = newSong.name;\n        song.artist = newSong.artist;\n        song.chords = newSong.chords;\n        song.youtube = newSong.youtube;\n        song.status = newSong.status;\n        song.notes = newSong.notes;\n        song.lyrics = newSong.lyrics;\n      }\n    });\n\n    // console.log(newSong);\n    const response = await fetch(`/api/songs/${newSong.id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(newSong),\n      // FIXME: headers line might not be technically required\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const data = await response.json();\n    // console.log(\"updated song sent to server\");\n  };\n\n  const filterSongs = (status) => {\n    songs.map((song) => {\n      // console.log(song.status);\n      if (status === \"All\") {\n        song.visible = true;\n      } else if (song.status === status) {\n        song.visible = true;\n      } else {\n        song.visible = false;\n      }\n    });\n    setSongs([...songs]);\n    // close mobile sidebar if it's open\n    setMobileSidebarShowing(false);\n  };\n\n  const deleteSong = async (songID) => {\n    // delete song from UI\n    setSongs(songs.filter((song) => song.id !== songID));\n    setEditShowing(false);\n\n    // delete from backend with API call\n    fetch(`/api/songs/${songID}`, {\n      method: \"DELETE\",\n    });\n\n    // console.log(\"songID\", songID);\n  };\n\n  const markCompleted = async (songID) => {\n    // console.log(\"mark completed\");\n    // console.log(songID);\n\n    songs.map(async (song) => {\n      if (song.id === songID) {\n        song.status = \"Learned\";\n        // send PUT request to the server\n        const response = await fetch(`/api/songs/${song.id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(song),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n      }\n    });\n\n    setSongs([...songs]);\n    setViewCardShowing(false);\n  };\n\n  const toggleMobileSidebar = (boolean) => {\n    setMobileSidebarShowing(boolean);\n    // console.log(\"toggle mobile sidebar clicked\");\n  };\n\n  const fetchGeniusData = async (song_name, artist_name) => {\n    // ACCESS TOKEN ---------------------------------------------------------------------\n    const accessToken = \"qsdfz6yd1U341DT9dPiANrAN67MdHenvI_D8s9g-QnNdmie17u97MhuDrHBr4Upj\";\n\n    // query Genius API and return the first hit's song data\n    const query = `${song_name.replaceAll(\n      \" \",\n      \"%20\"\n    )}%20${artist_name.replaceAll(\" \", \"%20\")}`;\n    const uri = `https://api.genius.com/search?access_token=${accessToken}&q=${query}`;\n    const search_response = await fetch(uri);\n    const data = await search_response.json();\n    console.log(data);\n    // first result of search; currently no checking in place yet\n    // If title of first result matches, then show the result\n    if (data.response.hits[0].result.title.toUpperCase().trim() === song_name.toUpperCase().trim()) {\n      console.log('MATCH FOUND')\n    } else {\n      console.log('No match found in the Genius Database. Double check spelling of song name and artist name.')\n    }\n\n    console.log(data.response.hits[0].result.full_title);\n    const api_path = data.response.hits[0].result.api_path;\n    const song_uri = `https://api.genius.com${api_path}?access_token=${accessToken}`;\n    const song_response = await fetch(song_uri);\n    const song_data = await song_response.json();\n    console.log(\"song data:\", song_data);\n\n    // song_data.response.song.media.forEach((media_source) => {\n    //   console.log(media_source.provider, \"link is\", media_source.url);\n    // });\n\n    console.log(\"genius link is \", song_data.response.song.url);\n\n    return song_data.response.song.media\n  }\n\n  return (\n    <div className=\"App\">\n      <Sidebar\n        toggle={toggleAddShowing}\n        allLen={songs.length}\n        count={count}\n        filter={filterSongs}\n      />\n\n      <Transition\n        in={mobileSidebarShowing}\n        timeout={400}\n        mountOnEnter\n        unmountOnExit\n      >\n        {(state) => (\n          <MobileSidebar\n            state={state}\n            toggle={toggleAddShowing}\n            allLen={songs.length}\n            count={count}\n            filter={filterSongs}\n            toggleSidebar={toggleMobileSidebar}\n          />\n        )}\n      </Transition>\n\n      {/* {mobileSidebarShowing && (\n        <MobileSidebar\n          toggle={toggleAddShowing}\n          allLen={songs.length}\n          count={count}\n          filter={filterSongs}\n          toggleSidebar={toggleMobileSidebar}\n        />\n      )} */}\n\n      <Transition in={viewCardShowing} timeout={400} mountOnEnter unmountOnExit>\n        {(state) => (\n          <ViewCard\n            state={state}\n            toggle={toggleViewCard}\n            toggleEdit={toggleEditShowing}\n            song={viewableSong}\n            exit={exitViewCard}\n            markCompleted={markCompleted}\n          />\n        )}\n      </Transition>\n\n      <Transition in={addShowing} timeout={400} mountOnEnter unmountOnExit>\n        {(state) => (\n          <AddModal\n            state={state}\n            toggle={toggleAddShowing}\n            onAddSong={addSong}\n          />\n        )}\n      </Transition>\n\n      {/* FIXME: including below line until I can fix bug with the above transition */}\n      {/* {addShowing && <AddModal toggle={toggleAddShowing} onAddSong={addSong} />} */}\n\n      <Transition in={editShowing} timeout={400} mountOnEnter unmountOnExit>\n        {(state) => (\n          <EditModal\n            state={state}\n            toggle={toggleEditShowing}\n            // probably will need to edit this so it doesn't create an entire new song\n            onAddSong={addSong}\n            song={viewableSong}\n            saveChanges={saveEditedSong}\n            deleteSong={deleteSong}\n          />\n        )}\n      </Transition>\n\n      <Heading toggleSidebar={toggleMobileSidebar} />\n      <div className=\"container\">\n        <div className=\"row cards-container offset-md-3 d-flex\">\n          {/* <Cards songs={songs} toggle={toggleViewCard} /> */}\n          {songs.length === 0 ? (\n            <p>No Songs</p>\n          ) : (\n            <Cards songs={songs} toggle={toggleViewCard} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}