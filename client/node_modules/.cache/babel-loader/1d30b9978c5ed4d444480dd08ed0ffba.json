{"ast":null,"code":"var _jsxFileName = \"/Users/williamconnell/Desktop/Projects/playerlist/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar.js\";\nimport Cards from \"./components/Cards.js\";\nimport Heading from \"./components/Heading.js\";\nimport AddModal from \"./components/AddModal.js\";\nimport ViewCard from \"./components/ViewCard.js\";\nimport EditModal from \"./components/EditModal.js\";\nimport MobileSidebar from \"./components/MobileSidebar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [addShowing, setAddShowing] = useState(false);\n  const [viewCardShowing, setViewCardShowing] = useState(false);\n  const [viewableSong, setViewableSong] = useState(\"\");\n  const [editShowing, setEditShowing] = useState(false);\n  const [mobileSidebarShowing, setMobileSidebarShowing] = useState(false);\n  const [count, setCount] = useState({\n    learned: 0,\n    tolearn: 0,\n    learning: 0\n  });\n  const [songs, setSongs] = useState([{\n    id: 2,\n    name: \"Neon\",\n    artist: \"John Mayer\",\n    chords: \"https://tabs.ultimate-guitar.com/tab/john-mayer/neon-tabs-48164\",\n    youtube: \"https://www.youtube.com/embed/_DfQC5qHhbo\",\n    status: \"In Progress\",\n    notes: \"\",\n    lyrics: \"\",\n    visible: true\n  }, {\n    id: 3,\n    name: \"Pride and Joy\",\n    artist: \"Stevie Ray Vaughn\",\n    chords: \"https://tabs.ultimate-guitar.com/tab/stevie-ray-vaughan-double-trouble/pride-and-joy-tabs-30829\",\n    youtube: \"https://www.youtube.com/embed/0vo23H9J8o8\",\n    status: \"In Progress\",\n    notes: \"\",\n    lyrics: \"\",\n    visible: true\n  }, {\n    id: 4,\n    name: \"Under the Bridge\",\n    artist: \"Red Hot Chili Peppers\",\n    chords: \"https://tabs.ultimate-guitar.com/tab/red-hot-chili-peppers/under-the-bridge-tabs-3832\",\n    youtube: \"https://www.youtube.com/embed/lwlogyj7nFE\",\n    status: \"To Learn\",\n    notes: \"\",\n    lyrics: \"\",\n    visible: true\n  }, {\n    id: 1,\n    name: \"Something\",\n    artist: \"The Beatles\",\n    chords: \"https://tabs.ultimate-guitar.com/tab/the-beatles/something-chords-335727\",\n    youtube: \"https://www.youtube.com/embed/UelDrZ1aFeY\",\n    status: \"Learned\",\n    notes: \"\",\n    lyrics: \"\",\n    visible: true\n  }]); // run code first time the App is rendered, and everytime song state changes\n\n  useEffect(() => {\n    let tolearn = 0;\n    let learning = 0;\n    let learned = 0;\n    songs.map(song => {\n      if (song.status === \"To Learn\") {\n        tolearn += 1;\n      } else if (song.status === \"In Progress\") {\n        learning += 1;\n      } else if (song.status === \"Learned\") {\n        learned += 1;\n      }\n    });\n    setCount({\n      learned: learned,\n      tolearn: tolearn,\n      learning: learning\n    });\n  }, [songs]);\n\n  const toggleAddShowing = () => {\n    setAddShowing(!addShowing);\n  };\n\n  const toggleEditShowing = () => {\n    setEditShowing(!editShowing);\n  };\n\n  const toggleViewCard = id => {\n    setViewCardShowing(!viewCardShowing); // fetch song data by id and store in viewableSong\n\n    songs.map(song => {\n      if (song.id === id) {\n        setViewableSong(song);\n      }\n    }); // console.log(songs.id);\n  };\n\n  const exitViewCard = () => {\n    setViewCardShowing(false);\n  };\n\n  const addSong = song => {\n    setAddShowing(false);\n    console.log(\"new song added\");\n    setSongs([...songs, {\n      id: song.id,\n      name: song.name,\n      artist: song.artist,\n      chords: song.chords,\n      youtube: song.youtube,\n      status: song.status,\n      notes: song.notes,\n      lyrics: song.lyrics,\n      visible: true\n    }]);\n  };\n\n  const saveEditedSong = newSong => {\n    // console.log(newSong);\n    songs.map(song => {\n      if (song.id === newSong.id) {\n        song.name = newSong.name;\n        song.artist = newSong.artist;\n        song.chords = newSong.chords;\n        song.youtube = newSong.youtube;\n        song.status = newSong.status;\n        song.notes = newSong.notes;\n        song.lyrics = newSong.lyrics;\n      }\n    }); // console.log(songs);\n  };\n\n  const filterSongs = status => {\n    songs.map(song => {\n      console.log(song.status);\n\n      if (status === \"All\") {\n        song.visible = true;\n      } else if (song.status === status) {\n        song.visible = true;\n      } else {\n        song.visible = false;\n      }\n    });\n    setSongs([...songs]);\n  };\n\n  const deleteSong = songID => {\n    setSongs(songs.filter(song => song.id !== songID));\n  };\n\n  const markCompleted = songID => {\n    console.log(\"mark completed\");\n    console.log(songID);\n    songs.map(song => {\n      if (song.id === songID) {\n        song.status = \"Learned\";\n      }\n    });\n    setSongs([...songs]);\n    setViewCardShowing(false); // include animation with the mark as completed button if possible;\n  };\n\n  const toggleMobileSidebar = () => {\n    setMobileSidebarShowing(!mobileSidebarShowing);\n    console.log(\"toggle mobile sidebar clicked\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      toggle: toggleAddShowing,\n      allLen: songs.length,\n      count: count,\n      filter: filterSongs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), viewCardShowing && /*#__PURE__*/_jsxDEV(ViewCard, {\n      toggle: toggleViewCard,\n      toggleEdit: toggleEditShowing,\n      song: viewableSong,\n      exit: exitViewCard,\n      markCompleted: markCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), addShowing && /*#__PURE__*/_jsxDEV(AddModal, {\n      toggle: toggleAddShowing,\n      onAddSong: addSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 22\n    }, this), editShowing && /*#__PURE__*/_jsxDEV(EditModal, {\n      toggle: toggleEditShowing // probably will need to edit this so it doesn't create an entire new song\n      ,\n      onAddSong: addSong,\n      song: viewableSong,\n      saveChanges: saveEditedSong,\n      deleteSong: deleteSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      toggleSidebar: toggleMobileSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row cards-container offset-md-3 d-flex\",\n        children: songs.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No Songs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Cards, {\n          songs: songs,\n          toggle: toggleViewCard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8gkr9ymGPxjJwbn4kNVNRoaTiE8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/williamconnell/Desktop/Projects/playerlist/src/App.js"],"names":["useState","useEffect","Sidebar","Cards","Heading","AddModal","ViewCard","EditModal","MobileSidebar","App","addShowing","setAddShowing","viewCardShowing","setViewCardShowing","viewableSong","setViewableSong","editShowing","setEditShowing","mobileSidebarShowing","setMobileSidebarShowing","count","setCount","learned","tolearn","learning","songs","setSongs","id","name","artist","chords","youtube","status","notes","lyrics","visible","map","song","toggleAddShowing","toggleEditShowing","toggleViewCard","exitViewCard","addSong","console","log","saveEditedSong","newSong","filterSongs","deleteSong","songID","filter","markCompleted","toggleMobileSidebar","length"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Sidebar from \"./components/Sidebar.js\";\nimport Cards from \"./components/Cards.js\";\nimport Heading from \"./components/Heading.js\";\nimport AddModal from \"./components/AddModal.js\";\nimport ViewCard from \"./components/ViewCard.js\";\nimport EditModal from \"./components/EditModal.js\";\nimport MobileSidebar from \"./components/MobileSidebar.js\";\n\nfunction App() {\n  const [addShowing, setAddShowing] = useState(false);\n  const [viewCardShowing, setViewCardShowing] = useState(false);\n  const [viewableSong, setViewableSong] = useState(\"\");\n  const [editShowing, setEditShowing] = useState(false);\n  const [mobileSidebarShowing, setMobileSidebarShowing] = useState(false);\n  const [count, setCount] = useState({\n    learned: 0,\n    tolearn: 0,\n    learning: 0,\n  });\n  const [songs, setSongs] = useState([\n    {\n      id: 2,\n      name: \"Neon\",\n      artist: \"John Mayer\",\n      chords: \"https://tabs.ultimate-guitar.com/tab/john-mayer/neon-tabs-48164\",\n      youtube: \"https://www.youtube.com/embed/_DfQC5qHhbo\",\n      status: \"In Progress\",\n      notes: \"\",\n      lyrics: \"\",\n      visible: true,\n    },\n    {\n      id: 3,\n      name: \"Pride and Joy\",\n      artist: \"Stevie Ray Vaughn\",\n      chords:\n        \"https://tabs.ultimate-guitar.com/tab/stevie-ray-vaughan-double-trouble/pride-and-joy-tabs-30829\",\n      youtube: \"https://www.youtube.com/embed/0vo23H9J8o8\",\n      status: \"In Progress\",\n      notes: \"\",\n      lyrics: \"\",\n      visible: true,\n    },\n    {\n      id: 4,\n      name: \"Under the Bridge\",\n      artist: \"Red Hot Chili Peppers\",\n      chords:\n        \"https://tabs.ultimate-guitar.com/tab/red-hot-chili-peppers/under-the-bridge-tabs-3832\",\n      youtube: \"https://www.youtube.com/embed/lwlogyj7nFE\",\n      status: \"To Learn\",\n      notes: \"\",\n      lyrics: \"\",\n      visible: true,\n    },\n    {\n      id: 1,\n      name: \"Something\",\n      artist: \"The Beatles\",\n      chords:\n        \"https://tabs.ultimate-guitar.com/tab/the-beatles/something-chords-335727\",\n      youtube: \"https://www.youtube.com/embed/UelDrZ1aFeY\",\n      status: \"Learned\",\n      notes: \"\",\n      lyrics: \"\",\n      visible: true,\n    },\n  ]);\n\n  // run code first time the App is rendered, and everytime song state changes\n  useEffect(() => {\n    let tolearn = 0;\n    let learning = 0;\n    let learned = 0;\n\n    songs.map((song) => {\n      if (song.status === \"To Learn\") {\n        tolearn += 1;\n      } else if (song.status === \"In Progress\") {\n        learning += 1;\n      } else if (song.status === \"Learned\") {\n        learned += 1;\n      }\n    });\n\n    setCount({\n      learned: learned,\n      tolearn: tolearn,\n      learning: learning,\n    });\n  }, [songs]);\n\n  const toggleAddShowing = () => {\n    setAddShowing(!addShowing);\n  };\n\n  const toggleEditShowing = () => {\n    setEditShowing(!editShowing);\n  };\n\n  const toggleViewCard = (id) => {\n    setViewCardShowing(!viewCardShowing);\n    // fetch song data by id and store in viewableSong\n    songs.map((song) => {\n      if (song.id === id) {\n        setViewableSong(song);\n      }\n    });\n    // console.log(songs.id);\n  };\n\n  const exitViewCard = () => {\n    setViewCardShowing(false);\n  };\n\n  const addSong = (song) => {\n    setAddShowing(false);\n    console.log(\"new song added\");\n    setSongs([\n      ...songs,\n      {\n        id: song.id,\n        name: song.name,\n        artist: song.artist,\n        chords: song.chords,\n        youtube: song.youtube,\n        status: song.status,\n        notes: song.notes,\n        lyrics: song.lyrics,\n        visible: true,\n      },\n    ]);\n  };\n\n  const saveEditedSong = (newSong) => {\n    // console.log(newSong);\n    songs.map((song) => {\n      if (song.id === newSong.id) {\n        song.name = newSong.name;\n        song.artist = newSong.artist;\n        song.chords = newSong.chords;\n        song.youtube = newSong.youtube;\n        song.status = newSong.status;\n        song.notes = newSong.notes;\n        song.lyrics = newSong.lyrics;\n      }\n    });\n    // console.log(songs);\n  };\n\n  const filterSongs = (status) => {\n    songs.map((song) => {\n      console.log(song.status);\n      if (status === \"All\") {\n        song.visible = true;\n      } else if (song.status === status) {\n        song.visible = true;\n      } else {\n        song.visible = false;\n      }\n    });\n    setSongs([...songs]);\n  };\n\n  const deleteSong = (songID) => {\n    setSongs(songs.filter((song) => song.id !== songID));\n  };\n\n  const markCompleted = (songID) => {\n    console.log(\"mark completed\");\n    console.log(songID);\n\n    songs.map((song) => {\n      if (song.id === songID) {\n        song.status = \"Learned\";\n      }\n    });\n\n    setSongs([...songs]);\n    setViewCardShowing(false);\n    // include animation with the mark as completed button if possible;\n  };\n\n  const toggleMobileSidebar = () => {\n    setMobileSidebarShowing(!mobileSidebarShowing);\n    console.log(\"toggle mobile sidebar clicked\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Sidebar\n        toggle={toggleAddShowing}\n        allLen={songs.length}\n        count={count}\n        filter={filterSongs}\n      />\n      {/* {mobileSidebarShowing && (\n        <MobileSidebar\n          toggle={toggleAddShowing}\n          allLen={songs.length}\n          count={count}\n          filter={filterSongs}\n          toggleSidebar={toggleMobileSidebar}\n        />\n      )} */}\n\n      {viewCardShowing && (\n        <ViewCard\n          toggle={toggleViewCard}\n          toggleEdit={toggleEditShowing}\n          song={viewableSong}\n          exit={exitViewCard}\n          markCompleted={markCompleted}\n        />\n      )}\n      {addShowing && <AddModal toggle={toggleAddShowing} onAddSong={addSong} />}\n\n      {editShowing && (\n        <EditModal\n          toggle={toggleEditShowing}\n          // probably will need to edit this so it doesn't create an entire new song\n          onAddSong={addSong}\n          song={viewableSong}\n          saveChanges={saveEditedSong}\n          deleteSong={deleteSong}\n        />\n      )}\n\n      <Heading toggleSidebar={toggleMobileSidebar} />\n      <div className=\"container\">\n        <div className=\"row cards-container offset-md-3 d-flex\">\n          {/* <Cards songs={songs} toggle={toggleViewCard} /> */}\n          {songs.length === 0 ? (\n            <p>No Songs</p>\n          ) : (\n            <Cards songs={songs} toggle={toggleViewCard} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}