[{"/Users/williamconnell/Desktop/Projects/playerlist/client/src/index.js":"1","/Users/williamconnell/Desktop/Projects/playerlist/client/src/reportWebVitals.js":"2","/Users/williamconnell/Desktop/Projects/playerlist/client/src/App.js":"3","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Cards.js":"4","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Sidebar.js":"5","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Heading.js":"6","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/ViewCard.js":"7","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/AddModal.js":"8","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/EditModal.js":"9","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/MobileSidebar.js":"10","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/NavbarBtn.js":"11","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Card.js":"12","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/StatusList.js":"13"},{"size":500,"mtime":1624671164043,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1624671164045,"results":"16","hashOfConfig":"15"},{"size":8794,"mtime":1627064518085,"results":"17","hashOfConfig":"15"},{"size":1214,"mtime":1626810073866,"results":"18","hashOfConfig":"15"},{"size":1686,"mtime":1625865069619,"results":"19","hashOfConfig":"15"},{"size":333,"mtime":1626122391734,"results":"20","hashOfConfig":"15"},{"size":2398,"mtime":1626459837300,"results":"21","hashOfConfig":"15"},{"size":5022,"mtime":1626379307421,"results":"22","hashOfConfig":"15"},{"size":7437,"mtime":1626459985854,"results":"23","hashOfConfig":"15"},{"size":2059,"mtime":1626460578578,"results":"24","hashOfConfig":"15"},{"size":391,"mtime":1626122499734,"results":"25","hashOfConfig":"15"},{"size":1506,"mtime":1626378192133,"results":"26","hashOfConfig":"15"},{"size":1675,"mtime":1625852087009,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1cxqpol",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/williamconnell/Desktop/Projects/playerlist/client/src/index.js",[],["59","60"],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/reportWebVitals.js",[],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/App.js",["61","62","63","64","65","66"],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Cards.js",["67"],"import Card from \"./Card.js\";\nimport Transition from \"react-transition-group/Transition\";\n\nconst Cards = (props) => {\n  return (\n    <>\n      {props.songs.map((song) => (\n        <>\n          {/* disable transition for now to fix bug  */}\n          {song.visible && (\n            <Card\n              id={song.id}\n              name={song.name}\n              artist={song.artist}\n              chords={song.chords}\n              youtube={song.youtube}\n              status={song.status}\n              lyrics={song.lyrics}\n              toggle={props.toggle}\n            />\n          )}\n          {/* <Transition\n            in={song.visible}\n            timeout={400}\n            mountOnEnter\n            unmountOnExit\n          >\n            {(state) => (\n              <Card\n                id={song.id}\n                name={song.name}\n                artist={song.artist}\n                chords={song.chords}\n                youtube={song.youtube}\n                status={song.status}\n                lyrics={song.lyrics}\n                toggle={props.toggle}\n                state={state}\n              />\n            )}\n          </Transition> */}\n        </>\n      ))}\n    </>\n  );\n};\n\nexport default Cards;\n","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Sidebar.js",[],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Heading.js",[],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/ViewCard.js",["68"],"import React from \"react\";\nimport { BsX, BsCheck } from \"react-icons/bs\";\n\nconst ViewCard = (props) => {\n  const onEdit = () => {\n    props.exit();\n    // show addmodal card but with current information already filled in\n    // create an editmodal component for ^this\n    // call function defined in App.js to show the edit modal\n    props.toggleEdit(props.song.id);\n  };\n\n  // const markAsLearned = () => {\n  //   // mark song as learned;\n  // };\n  const modalClasses = [\n    \"addmodal\",\n    props.state === \"entering\"\n      ? \"enteringCard\"\n      : props.state === \"exiting\"\n      ? \"exitingCard\"\n      : \"\",\n  ];\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.state === \"entering\"\n      ? \"enteringBackdrop\"\n      : props.state === \"exiting\"\n      ? \"exitingBackdrop\"\n      : \"\",\n  ];\n\n  return (\n    <>\n      <div className={backdropClasses.join(\" \")} onClick={props.exit} />\n      <div className={modalClasses.join(\" \")}>\n        <div className=\"modalheading d-flex justify-content-between\">\n          <span />\n          <h1 style={{ textAlign: \"center\" }}>{props.song.name}</h1>\n          <BsX className=\"modalX\" onClick={props.toggle} />\n        </div>\n        <div className=\"modalheading d-flex justify-content-between\">\n          <span />\n          <h2 style={{ textAlign: \"center\" }}>by {props.song.artist}</h2>\n          {/* keep modalX here for consistent layout, but make it invisible and non-functional */}\n          <BsX className=\"modalX hidden\" />\n        </div>\n        {/* <iframe src=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"></iframe> */}\n        {props.song.youtube !== \"https://www.youtube.com/embed/\" && (\n          <iframe width=\"100%\" height=\"345\" src={props.song.youtube}></iframe>\n        )}\n\n        <button className=\"btn btn-outline-dark\">Chords / Tabs</button>\n        <br />\n        {/* {make ^this open into a new window} */}\n        <p>Lyrics in a nice format; use Lorem ipsum</p>\n        <p>Notes</p>\n        <div className=\"d-flex\">\n          <button onClick={onEdit} className=\"btn btn-secondary m-1\">\n            Edit\n          </button>\n          <button\n            onClick={() => props.markCompleted(props.song.id)}\n            className=\"btn btn-light m-1\"\n          >\n            <BsCheck style={{ marginRight: \"5px\" }} />\n            Mark as Learned\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ViewCard;\n","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/AddModal.js",["69"],"import React from \"react\";\nimport { useState } from \"react\";\nimport { BsX } from \"react-icons/bs\";\n\nconst AddModal = (props) => {\n  const [songName, setSongName] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [chords, setChords] = useState(\"\");\n  const [youtube, setYoutube] = useState(\"\");\n  const [status, setStatus] = useState(\"To Learn\");\n  const [notes, setNotes] = useState(\"\");\n  const [lyrics, setLyrics] = useState(\"\");\n\n  const onSubmit = (e) => {\n    // convert youtube link to embed link\n    const code = youtube.slice(-11);\n    const newlink = \"https://www.youtube.com/embed/\" + code;\n\n    const song = {\n      id: Math.random() * 10 + 1,\n      name: songName,\n      artist: artist,\n      chords: chords,\n      youtube: newlink,\n      status: status,\n      notes: notes,\n      lyrics: lyrics,\n    };\n    props.onAddSong(song);\n  };\n\n  if (props.state === \"entering\") {\n    console.log(\"entering\");\n  } else if (props.state === \"exiting\") {\n    console.log(\"exiting\");\n  }\n\n  const modalClasses = [\n    \"addmodal\",\n    props.state === \"entering\"\n      ? \"enteringCard\"\n      : props.state === \"exiting\"\n      ? \"exitingCard\"\n      : \"\",\n  ];\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.state === \"entering\"\n      ? \"enteringBackdrop\"\n      : props.state === \"exiting\"\n      ? \"exitingBackdrop\"\n      : \"\",\n  ];\n\n  return (\n    <>\n      <div className={backdropClasses.join(\" \")} />\n      <form className={modalClasses.join(\" \")} onSubmit={onSubmit}>\n        <div className=\"modalheading d-flex justify-content-between\">\n          <span />\n          <h1 style={{ textAlign: \"center\" }}>Add a Song</h1>\n          <BsX className=\"modalX\" onClick={props.toggle} />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Song Name\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            placeholder=\"Something\"\n            onChange={(e) => setSongName(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Artist\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            placeholder=\"The Beatles\"\n            onChange={(e) => setArtist(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Link to Chords / Tabs\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            placeholder=\"http://example.com\"\n            onChange={(e) => setChords(e.target.value)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Link to Youtube\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            placeholder=\"http://example.com\"\n            onChange={(e) => setYoutube(e.target.value)}\n          />\n        </div>\n\n        <label className=\"form-label\">Status:</label>\n        <div className=\"form-check\" onChange={(e) => setStatus(e.target.value)}>\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            id=\"radio-learning\"\n            name=\"status\"\n            value=\"In Progress\"\n          />\n          <label htmlFor=\"radio-learning\">Learning In Progress</label>\n          <br />\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            id=\"radio-tolearn\"\n            name=\"status\"\n            value=\"To Learn\"\n            defaultChecked\n          />\n          <label htmlFor=\"radio-tolearn\">Want to Learn</label>\n          <br />\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            id=\"radio-learned\"\n            name=\"status\"\n            value=\"Learned\"\n          />\n          <label htmlFor=\"radio-learned\">Learned</label>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">\n            Notes\n          </label>\n          <textarea\n            className=\"form-control\"\n            id=\"exampleFormControlTextarea1\"\n            rows=\"3\"\n            placeholder=\"Notes\"\n            onChange={(e) => setNotes(e.target.value)}\n          ></textarea>\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary m-2\"\n          onClick={props.toggle}\n        >\n          Cancel\n        </button>\n        <button type=\"submit\" className=\"btn btn-success m-2\">\n          Save Changes\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default AddModal;\n","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/EditModal.js",["70"],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { BsX, BsTrash } from \"react-icons/bs\";\n\nconst EditModal = (props) => {\n  const [songid, setSongid] = useState(\"\");\n  const [songName, setSongName] = useState(\"\");\n  const [artist, setArtist] = useState(\"\");\n  const [chords, setChords] = useState(\"\");\n  const [youtube, setYoutube] = useState(\"\");\n  const [status, setStatus] = useState(\"To Learn\");\n  const [notes, setNotes] = useState(\"\");\n  const [lyrics, setLyrics] = useState(\"\");\n\n  // the first time the modal is rendered, set song parameters (so they're not empty)\n  useEffect(() => {\n    console.log(\"EFFECT RUNNING\");\n    setSongid(props.song.id);\n    setSongName(props.song.name);\n    setArtist(props.song.artist);\n    setChords(props.song.chords);\n    setYoutube(props.song.youtube);\n    setStatus(props.song.status);\n    setNotes(props.song.notes);\n    setLyrics(props.song.lyrics);\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // if (youtube != \"https://www.youtube.com/embed/\") {\n    //   const code = youtube.slice(-11);\n    //   const newlink = \"https://www.youtube.com/embed/\" + code;\n    // } else {\n    //   const newlink = \"\";\n    // }\n\n    const code = youtube.slice(-11);\n    const newlink = \"https://www.youtube.com/embed/\" + code;\n\n    const song = {\n      id: songid,\n      name: songName,\n      artist: artist,\n      chords: chords,\n      youtube: newlink,\n      status: status,\n      notes: notes,\n      lyrics: lyrics,\n    };\n\n    props.saveChanges(song);\n    props.toggle();\n  };\n\n  // const onDelete = () => {\n  //   console.log(\"Song Deleted!\");\n  // };\n  const modalClasses = [\n    \"addmodal\",\n    props.state === \"entering\"\n      ? \"enteringCard\"\n      : props.state === \"exiting\"\n      ? \"exitingCard\"\n      : \"\",\n  ];\n\n  const backdropClasses = [\n    \"backdrop\",\n    props.state === \"entering\"\n      ? \"enteringBackdrop\"\n      : props.state === \"exiting\"\n      ? \"exitingBackdrop\"\n      : \"\",\n  ];\n\n  return (\n    <>\n      <div className={backdropClasses.join(\" \")} />\n      <form className={modalClasses.join(\" \")} onSubmit={onSubmit}>\n        <div className=\"modalheading d-flex justify-content-between\">\n          <span />\n          <h1 style={{ textAlign: \"center\" }}>Edit Song</h1>\n          <BsX className=\"modalX\" onClick={props.toggle} />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Song Name\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            defaultValue={props.song.name}\n            placeholder=\"Something\"\n            onChange={(e) => setSongName(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Artist\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            defaultValue={props.song.artist}\n            placeholder=\"The Beatles\"\n            onChange={(e) => setArtist(e.target.value)}\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Link to Chords / Tabs\n          </label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"exampleFormControlInput1\"\n            placeholder=\"http://example.com\"\n            defaultValue={props.song.chords}\n            onChange={(e) => setChords(e.target.value)}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlInput1\" className=\"form-label\">\n            Link to Youtube\n          </label>\n          {props.song.youtube !== \"https://www.youtube.com/embed/\" ? (\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"exampleFormControlInput1\"\n              defaultValue={props.song.youtube}\n              placeholder=\"http://example.com\"\n              onChange={(e) => setYoutube(e.target.value)}\n            />\n          ) : (\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"exampleFormControlInput1\"\n              placeholder=\"http://example.com\"\n              onChange={(e) => setYoutube(e.target.value)}\n            />\n          )}\n        </div>\n\n        <label className=\"form-label\">Status:</label>\n        <div className=\"form-check\" onChange={(e) => setStatus(e.target.value)}>\n          {props.song.status === \"In Progress\" ? (\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              id=\"radio-learning\"\n              name=\"status\"\n              value=\"In Progress\"\n              defaultChecked\n            />\n          ) : (\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              id=\"radio-learning\"\n              name=\"status\"\n              value=\"In Progress\"\n            />\n          )}\n          <label htmlFor=\"radio-learning\">Learning In Progress</label>\n          <br />\n\n          {props.song.status === \"To Learn\" ? (\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              id=\"radio-tolearn\"\n              name=\"status\"\n              value=\"To Learn\"\n              defaultChecked\n            />\n          ) : (\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              id=\"radio-tolearn\"\n              name=\"status\"\n              value=\"To Learn\"\n            />\n          )}\n          <label htmlFor=\"radio-tolearn\">Want to Learn</label>\n          <br />\n          {props.song.status === \"Learned\" ? (\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              id=\"radio-learned\"\n              name=\"status\"\n              value=\"Learned\"\n              defaultChecked\n            />\n          ) : (\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              id=\"radio-learned\"\n              name=\"status\"\n              value=\"Learned\"\n            />\n          )}\n          <label htmlFor=\"radio-learned\">Learned</label>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">\n            Notes\n          </label>\n          <textarea\n            className=\"form-control\"\n            id=\"exampleFormControlTextarea1\"\n            rows=\"3\"\n            defaultValue={props.song.notes}\n            placeholder=\"Notes\"\n            onChange={(e) => setNotes(e.target.value)}\n          ></textarea>\n        </div>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary m-2\"\n          onClick={props.toggle}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-danger m-2\"\n          onClick={() => {\n            props.deleteSong(props.song.id);\n          }}\n        >\n          <BsTrash style={{ marginRight: \"5px\" }} />\n          Delete Song\n        </button>\n        <button type=\"submit\" className=\"btn btn-success m-2\">\n          Save Changes\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default EditModal;\n","/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/MobileSidebar.js",[],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/NavbarBtn.js",[],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/Card.js",[],"/Users/williamconnell/Desktop/Projects/playerlist/client/src/components/StatusList.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":26,"column":13,"nodeType":"77","endLine":53,"endColumn":4},{"ruleId":"78","severity":1,"message":"79","line":73,"column":22,"nodeType":"77","messageId":"80","endLine":73,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":103,"column":22,"nodeType":"77","messageId":"80","endLine":103,"endColumn":24},{"ruleId":"81","severity":1,"message":"82","line":168,"column":11,"nodeType":"83","messageId":"84","endLine":168,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":173,"column":22,"nodeType":"77","messageId":"80","endLine":173,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":203,"column":22,"nodeType":"77","messageId":"80","endLine":203,"endColumn":24},{"ruleId":"81","severity":1,"message":"85","line":2,"column":8,"nodeType":"83","messageId":"84","endLine":2,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":51,"column":11,"nodeType":"88","endLine":51,"endColumn":70},{"ruleId":"81","severity":1,"message":"89","line":12,"column":18,"nodeType":"83","messageId":"84","endLine":12,"endColumn":27},{"ruleId":"75","severity":1,"message":"90","line":26,"column":6,"nodeType":"91","endLine":26,"endColumn":8,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'Transition' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'setLyrics' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.song.artist', 'props.song.chords', 'props.song.id', 'props.song.lyrics', 'props.song.name', 'props.song.notes', 'props.song.status', and 'props.song.youtube'. Either include them or remove the dependency array. If 'setSongid' needs the current value of 'props.song.id', you can also switch to useReducer instead of useState and read 'props.song.id' in the reducer.","ArrayExpression",["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [props.song.artist, props.song.chords, props.song.id, props.song.lyrics, props.song.name, props.song.notes, props.song.status, props.song.youtube]",{"range":"98","text":"99"},[930,932],"[props.song.artist, props.song.chords, props.song.id, props.song.lyrics, props.song.name, props.song.notes, props.song.status, props.song.youtube]"]